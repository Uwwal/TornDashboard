Index: app/src/main/java/com/example/torndashboard/widget/WidgetProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.torndashboard.widget\r\n\r\nimport android.app.PendingIntent\r\nimport android.appwidget.AppWidgetManager\r\nimport android.appwidget.AppWidgetProvider\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.text.Html\r\nimport android.util.Log\r\nimport android.widget.RemoteViews\r\nimport com.example.torndashboard.MainActivity\r\nimport com.example.torndashboard.R\r\nimport com.example.torndashboard.config.AppConfig\r\nimport com.example.torndashboard.utils.itemsList\r\nimport com.example.torndashboard.config.AppConfig.maxTime\r\nimport com.example.torndashboard.config.AppConfig.timeFilter\r\nimport com.example.torndashboard.config.AppConfig.timeIsZeroTextVisibility\r\nimport com.example.torndashboard.config.AppConfig.timeMinText\r\nimport com.example.torndashboard.utils.ApiResponseCallback\r\nimport com.example.torndashboard.utils.CooldownsResponse\r\nimport com.example.torndashboard.utils.ErrorInfo\r\nimport com.example.torndashboard.utils.ErrorResponse\r\nimport com.example.torndashboard.utils.EventsResponse\r\nimport com.example.torndashboard.utils.Item\r\nimport com.example.torndashboard.utils.MoneyResponse\r\nimport com.example.torndashboard.web.RetrofitClient\r\nimport com.example.torndashboard.utils.StatsResponse\r\nimport com.example.torndashboard.utils.TravelResponse\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport java.util.Locale\r\n\r\nclass WidgetProvider : AppWidgetProvider() {\r\n    private lateinit var views: RemoteViews\r\n    private var minTime: Int = maxTime\r\n    private var minText: String = \"\"\r\n\r\n    private fun getCurrentTimeFormatted(): String {\r\n        val dateFormat = SimpleDateFormat(\"HH:mm:ss\", Locale.getDefault())\r\n        val currentTime = Date()\r\n        return dateFormat.format(currentTime)\r\n    }\r\n\r\n    private fun setRemoteViewsText(id: Int, string: String) {\r\n        views.setTextViewText(id, string)\r\n    }\r\n\r\n    private fun update(views: RemoteViews, context: Context?, appWidgetId: Int) {\r\n        val appWidgetManager = AppWidgetManager.getInstance(context)\r\n\r\n        minText = \"\"\r\n\r\n        updateStats(views, appWidgetManager, appWidgetId)\r\n        updateMoney(views, appWidgetManager, appWidgetId)\r\n        updateCooldowns(views, appWidgetManager, appWidgetId)\r\n        updateTravel(views, appWidgetManager, appWidgetId)\r\n        updateEvents(views, appWidgetManager, appWidgetId)\r\n\r\n        setRemoteViewsText(R.id.currentUpdateTextView, getCurrentTimeFormatted())\r\n\r\n        appWidgetManager.updateAppWidget(appWidgetId, views)\r\n\r\n        minTime = maxTime\r\n    }\r\n\r\n    private fun updateEvents(\r\n        views: RemoteViews,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int\r\n    ) {\r\n        val eventsCall = RetrofitClient.apiService.getEventsInfo()\r\n\r\n        eventsCall.enqueue(ApiResponseCallback<EventsResponse>(\r\n            onSuccess = { eventsResponse ->\r\n                val eventsCount = eventsResponse?.events?.size ?: -1\r\n\r\n                setRemoteViewsText(R.id.currentEventTextView, eventsCount.toString())\r\n\r\n                eventsResponse?.let { checkResponseError(it) }\r\n\r\n                if (eventsCount != -1 && eventsResponse?.events != null) {\r\n                    for ((_, eventData) in eventsResponse.events) {\r\n                        val timestamp = eventData.timestamp\r\n                        val eventText = eventData.event\r\n\r\n                        val dateFormat = SimpleDateFormat(\"HH:mm:ss\", Locale.getDefault())\r\n\r\n                        val item = Item(\r\n                            \"Event\",\r\n                            \"\\t\\t${Html.fromHtml(eventText, Html.FROM_HTML_MODE_LEGACY)}\",\r\n                            dateFormat.format(timestamp*1000)\r\n                        )\r\n\r\n                        itemsList.add(item)\r\n                    }\r\n                }\r\n\r\n                appWidgetManager.updateAppWidget(appWidgetId, views)\r\n            },\r\n            onError = { error ->\r\n                updateError(error.toString())\r\n                error.printStackTrace()\r\n            }\r\n        ))\r\n    }\r\n\r\n    private fun checkResponseError(eventsResponse: ErrorResponse) {\r\n        val errorResponse = eventsResponse.error\r\n        if (errorResponse?.error != null) {\r\n            updateError(\"code: ${errorResponse.code}\\nerror: ${errorResponse.error}\")\r\n        }\r\n    }\r\n\r\n    private fun updateTravel(\r\n        views: RemoteViews,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int\r\n    ) {\r\n        val travelCall = RetrofitClient.apiService.getTravelInfo()\r\n\r\n\r\n        travelCall.enqueue(ApiResponseCallback<TravelResponse>(\r\n            onSuccess = { travelResponse ->\r\n                val travel = travelResponse?.travel\r\n\r\n                val timeLeft = travel?.time_left ?: maxTime\r\n\r\n                travelResponse?.let { checkResponseError(it) }\r\n\r\n                updateMinTime(intArrayOf(timeLeft), 7)\r\n\r\n                updateTimeTextView(R.id.currentTravelTextView, timeLeft)\r\n\r\n                appWidgetManager.updateAppWidget(appWidgetId, views)\r\n\r\n\r\n            },\r\n            onError = { error ->\r\n                updateError(error.toString())\r\n                error.printStackTrace()\r\n            }\r\n        ))\r\n    }\r\n\r\n    private fun updateCooldowns(\r\n        views: RemoteViews,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int\r\n    ) {\r\n        val cooldownsCall = RetrofitClient.apiService.getCooldownsInfo()\r\n\r\n        cooldownsCall.enqueue(ApiResponseCallback<CooldownsResponse>(\r\n            onSuccess = { cooldownsResponse ->\r\n                val cooldowns = cooldownsResponse?.cooldowns\r\n\r\n                val drug = cooldowns?.drug ?: maxTime\r\n                val booster = cooldowns?.booster ?: maxTime\r\n                val medical = cooldowns?.medical ?: maxTime\r\n\r\n                cooldownsResponse?.let { checkResponseError(it) }\r\n\r\n                updateTimeTextView(R.id.currentDrugTextView, drug)\r\n                updateTimeTextView(R.id.currentBoosterTextView, booster)\r\n                updateTimeTextView(R.id.currentMedicalTextView, medical)\r\n\r\n                val timeArray = intArrayOf(drug, booster, medical)\r\n\r\n                updateMinTime(timeArray, 4)\r\n\r\n                appWidgetManager.updateAppWidget(appWidgetId, views)\r\n            },\r\n            onError = { error ->\r\n                updateError(error.toString())\r\n                error.printStackTrace()\r\n            }\r\n        ))\r\n    }\r\n\r\n    private fun updateError(error: String) {\r\n        val item = Item(\"Error\", error, getCurrentTimeFormatted())\r\n\r\n        itemsList.add(item)\r\n    }\r\n\r\n    private fun updateMinTime(timeArray: IntArray, start: Int = 0) {\r\n        var i = start\r\n        val end = start + timeArray.size\r\n        while (i < end) {\r\n            val current = i - start\r\n\r\n            if (timeFilter[i] && timeArray[current] <= minTime && (timeArray[current] != 0 || timeIsZeroTextVisibility[i])) {\r\n                if (timeArray[i - start] <= minTime) {\r\n                    minTime = timeArray[current]\r\n                    if (timeArray[current] == 0) {\r\n                        minText += timeMinText[i]\r\n                    }\r\n                    updateTimeTextView(R.id.currentMinTextView, minTime, minText)\r\n                }\r\n            }\r\n            i++\r\n        }\r\n    }\r\n\r\n    private fun updateTimeTextView(id: Int, time: Int, text: String = \"可\") {\r\n        if (time == 0) {\r\n            setRemoteViewsText(id, text)\r\n        } else {\r\n            val dateFormat = SimpleDateFormat(\"HH:mm:ss\", Locale.getDefault())\r\n            val currentTime = Date()\r\n            val newTime = Date(currentTime.time + (time * 1000L))\r\n\r\n            setRemoteViewsText(id, dateFormat.format(newTime))\r\n        }\r\n    }\r\n\r\n    private fun updateMoney(\r\n        views: RemoteViews,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int\r\n    ) {\r\n        val moneyCall = RetrofitClient.apiService.getMoneyInfo()\r\n\r\n        moneyCall.enqueue(ApiResponseCallback<MoneyResponse>(\r\n            onSuccess = { moneyResponse ->\r\n                val moneyOnHand = \"$\" + (moneyResponse?.money_onhand ?: -1).toString()\r\n\r\n                moneyResponse?.let { checkResponseError(it) }\r\n\r\n                setRemoteViewsText(R.id.currentWalletTextView, moneyOnHand)\r\n\r\n                appWidgetManager.updateAppWidget(appWidgetId, views)\r\n            },\r\n            onError = { error ->\r\n                updateError(error.toString())\r\n                error.printStackTrace()\r\n            }\r\n        ))\r\n    }\r\n\r\n    private fun updateStats(\r\n        views: RemoteViews,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int\r\n    ) {\r\n        val statsCall = RetrofitClient.apiService.getStatsInfo()\r\n\r\n        statsCall.enqueue(ApiResponseCallback<StatsResponse>(\r\n            onSuccess = { statsResponse ->\r\n                val energyStats = statsResponse?.energy\r\n                val nerveStats = statsResponse?.nerve\r\n                val happyStats = statsResponse?.happy\r\n                val lifeStats = statsResponse?.life\r\n\r\n                val timeArray = intArrayOf(\r\n                    energyStats?.fulltime ?: maxTime,\r\n                    nerveStats?.fulltime ?: maxTime,\r\n                    happyStats?.fulltime ?: maxTime,\r\n                    lifeStats?.fulltime ?: maxTime,\r\n                )\r\n\r\n                statsResponse?.let { checkResponseError(it) }\r\n\r\n                updateStatsView(\r\n                    R.id.currentEnergyTextView,\r\n                    R.id.energyProgressBar,\r\n                    energyStats?.current ?: -1,\r\n                    energyStats?.maximum ?: -1\r\n                )\r\n                updateStatsView(\r\n                    R.id.currentNerveTextView,\r\n                    R.id.nerveProgressBar,\r\n                    nerveStats?.current ?: -1,\r\n                    nerveStats?.maximum ?: -1\r\n                )\r\n                updateStatsView(\r\n                    R.id.currentHappyTextView,\r\n                    R.id.happyProgressBar,\r\n                    happyStats?.current ?: -1,\r\n                    happyStats?.maximum ?: -1\r\n                )\r\n                updateStatsView(\r\n                    R.id.currentLifeTextView,\r\n                    R.id.lifeProgressBar,\r\n                    lifeStats?.current ?: -1,\r\n                    lifeStats?.maximum ?: -1\r\n                )\r\n\r\n                updateMinTime(timeArray)\r\n\r\n                appWidgetManager.updateAppWidget(appWidgetId, views)\r\n            },\r\n            onError = { error ->\r\n                updateError(error.toString())\r\n                error.printStackTrace()\r\n            }\r\n        ))\r\n    }\r\n\r\n    private fun updateStatsView(textId: Int, barId: Int, current: Int, maximum: Int) {\r\n        views.setTextViewText(textId, \"$current/$maximum\")\r\n        views.setProgressBar(barId, 100, 100 * current / maximum, false)\r\n    }\r\n\r\n    override fun onUpdate(\r\n        context: Context,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetIds: IntArray\r\n    ) {\r\n        for (appWidgetId in appWidgetIds) {\r\n            views = RemoteViews(context.packageName, R.layout.widget_layout)\r\n\r\n            setupUpdateClickEvent(context, appWidgetId)\r\n            setupEventClickEvent(context, appWidgetId)\r\n\r\n            appWidgetManager.updateAppWidget(appWidgetId, views)\r\n        }\r\n    }\r\n\r\n    private fun setupEventClickEvent(context: Context, appWidgetId: Int) {\r\n        val intent = Intent(context, WidgetProvider::class.java)\r\n        intent.action = \"Event_CLICK\"\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context, appWidgetId, intent,\r\n            PendingIntent.FLAG_IMMUTABLE\r\n        )\r\n        views.setOnClickPendingIntent(R.id.eventTextView, pendingIntent)\r\n        views.setOnClickPendingIntent(R.id.currentEventTextView, pendingIntent)\r\n        views.setOnClickPendingIntent(R.id.eventLinearLayout, pendingIntent)\r\n    }\r\n\r\n    private fun setupUpdateClickEvent(context: Context, appWidgetId: Int) {\r\n        val intent = Intent(context, WidgetProvider::class.java)\r\n        intent.action = \"UPDATE_CLICK\"\r\n        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context, appWidgetId, intent,\r\n            PendingIntent.FLAG_IMMUTABLE\r\n        )\r\n        views.setOnClickPendingIntent(R.id.currentUpdateTextView, pendingIntent)\r\n        views.setOnClickPendingIntent(R.id.updateTextView, pendingIntent)\r\n    }\r\n\r\n    override fun onReceive(context: Context?, intent: Intent?) {\r\n        super.onReceive(context, intent)\r\n\r\n        context?.let { RetrofitClient.checkApiKey(it) }\r\n\r\n        if (intent?.action == \"UPDATE_CLICK\") {\r\n            val appWidgetId = intent.getIntExtra(\r\n                AppWidgetManager.EXTRA_APPWIDGET_ID,\r\n                AppWidgetManager.INVALID_APPWIDGET_ID\r\n            )\r\n\r\n            context?.let { AppConfig.initialize(context) }\r\n\r\n            views = RemoteViews(context?.packageName, R.layout.widget_layout)\r\n\r\n            update(views, context, appWidgetId)\r\n        } else if (intent?.action == \"Event_CLICK\") {\r\n            val mainActivityIntent = Intent(context, MainActivity::class.java)\r\n            mainActivityIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n\r\n            context?.startActivity(mainActivityIntent)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/torndashboard/widget/WidgetProvider.kt b/app/src/main/java/com/example/torndashboard/widget/WidgetProvider.kt
--- a/app/src/main/java/com/example/torndashboard/widget/WidgetProvider.kt	(revision b61a011aa516ea73b971313fc43fed559bbf5ffe)
+++ b/app/src/main/java/com/example/torndashboard/widget/WidgetProvider.kt	(date 1694865232235)
@@ -26,6 +26,7 @@
 import com.example.torndashboard.web.RetrofitClient
 import com.example.torndashboard.utils.StatsResponse
 import com.example.torndashboard.utils.TravelResponse
+import java.text.NumberFormat
 import java.text.SimpleDateFormat
 import java.util.Date
 import java.util.Locale
@@ -222,7 +223,7 @@
 
         moneyCall.enqueue(ApiResponseCallback<MoneyResponse>(
             onSuccess = { moneyResponse ->
-                val moneyOnHand = "$" + (moneyResponse?.money_onhand ?: -1).toString()
+                val moneyOnHand = "$" + NumberFormat.getNumberInstance(Locale.US).format(moneyResponse?.money_onhand ?: -1)
 
                 moneyResponse?.let { checkResponseError(it) }
 
